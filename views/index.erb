<!DOCTYPE>
<html lang="en">
  <meta encoding="utf-8">
  <head>
    <title>Planit: Software Testing</title>
    <link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
    <style>
      /* Generic Style */
      body {margin:0 auto; padding: 0; width: 960px;}
      h1 {font-family: 'Open Sans'; color: #333; padding: 0; margin: 0; font-size: 24px; text-align: right;}
      h2 { font-family: 'Open Sans'; color: #555; padding: 0; margin: 0; font-size: 14px; text-align: right;}
      p {font-family: 'Open Sans'; color: #666; font-size: 14px; line-height: 20px; margin: 0; padding: 0;}
      header {margin-top: 10px; margin-bottom: 10px; display: block;}

      /* Graph Style */
      .graph {width: 960px; height: 800px; margin: 0; padding: 0; display: block; }
      text {font-family: sans-serif; font-size: 12px; stroke: none; fill: black;}
      .axis text {
        font: 9px sans-serif;
        shape-rendering: crispEdges;
      }

      .axis line,
      .axis path {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
      }
    </style>
    <script src="js/d3.v3.min.js"></script>
    <script src="js/horizon.js"></script>
  </head>
  <body>
    <header>
        <h1>Planit Testing Cloud</h1>
        <h2>MONITOR</h2>
    </header>            
    <%
      ENV["GEM_PATH"] 
      require 'sqlite3'
      require 'oj'
      require 'date'
       
      @db = SQLite3::Database.new("./planit_index.sqlite3", results_as_hash:true)
      @current_day =  Time.at(DateTime.now.to_time.to_i-(60*60*24)).strftime("%Y-%m-%d") + " 00:00:00"
      # @current_day =  DateTime.now.to_date.strftime("%Y-%m-%d") + " 00:00:00"

      # query_source = "select * from web_breakdown where monitored_at >= '#{@current_day}'"
      query_source = "select * from web_breakdown"
      query_names = "select * from monitor"

      # query = "select * from web_breakdown"
      query_result = @db.execute(query_source)
      query_result.each { |e| e.keep_if {|k,v| ["site_id", "monitored_at", "time_connect", "time_starttransfer", "time_total", "time_appconnect", "time_namelookup", "time_pretransfer", "time_redirect", "num_connects", "size_download"].include? k } }
      @result_json = Oj.dump(query_result)

      query_head = @db.execute(query_names)
      @result_head = Oj.dump(query_head) 

      @db.close
      
    %>
    <div class="graph"></div>
    <script>
      var source_data = JSON.parse('<%= @result_json %>');
      var source_head = JSON.parse('<%= @result_head %>');
      var w = 960, h=600;
      var y = d3.scale.ordinal();
      var x = d3.time.scale();

      var svg = d3.select("div.graph").append("svg").attr("width", w).attr("height", h);
      //var names = d3.range(33);
      var names = source_head.map(function(d) { return d.url});

      // Setting ordinal scale
      y.domain(names).rangeBands([30,h-40]);      

      var yAxis = d3.svg.axis().scale(y).orient("left");
      var xAxis = d3.svg.axis().scale(x).orient("bottom");

      var margin_header = 180;

      svg.append("g")
        .attr("transform", "translate("+margin_header+",0)")         // Add the Y Axis
        .attr("class", "y axis")
        .call(yAxis);

      // Prints Labels
      // svg.selectAll("text").data(names).enter()
      //   .append("text")
      //   .attr("text-anchor", "end")   
      //   .attr("x", 100)
      //   .attr("y", function(d,i) { return h-yAxis(d)})
      //   .text(function(d) {return d;});

      var band = y.range()[1]-y.range()[0];

      // Horizon
      var chart = d3.horizon()
        .width(889)
        .height(band)
        .bands(6)        
        .mode("mirror") //offset
        .interpolate("basis");
      
      source_head.forEach(function(t,i) {
        var data = [];
        // d3.range(90).forEach(function(d,i) {
        //   data.push([Date.UTC(2013, 10, i), Math.random()*10])
        // });
        source_data
          .filter(function(d) {return d.site_id == t.id})
          .forEach(function(d,i) {
          // data.push([new Date(d.monitored_at+"Z"), +d.time_total]);
          data.push([new Date(d.monitored_at+"Z"), +d.time_total]);
          
        });

        var graph = svg.append("g")        
        .attr("transform", "translate("+(margin_header+1)+","+((i*band)+30)+")")
        .attr("width", 600)
        .attr("height",band)
        .attr("class","horizon");

        graph.data([data]).call(chart);  
      });

      x.domain(d3.extent(d3.merge(d3.selectAll("g.horizon").data()), function(d) {return new Date(d[0])})).range([0,960])
      svg.append("g")
        .attr("transform", "translate("+margin_header+",560)")         // Add the Y Axis
        .attr("class", "x axis")
        .call(xAxis);
      

    </script>
  </body>
 </html>

